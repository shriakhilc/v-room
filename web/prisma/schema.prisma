generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity", "fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  pronouns      String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  classrooms    UserOnClassroom[]
  Question      Question[]
  Answer        Answer[]
  LikeQuestion  LikeQuestion[]
  LikeAnswer    LikeAnswer[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  id           String            @id @default(cuid())
  name         String
  department   String
  courseNumber Int               @unique
  crn          Int               @unique
  users        UserOnClassroom[]
  meetings     String            @default("")
  inviteCode   String            @unique @default(cuid())
  active       Boolean           @default(true)
  Question     Question[]
}

model UserOnClassroom {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String
  role        UserRole  @default(STUDENT)

  @@id([userId, classroomId])
}

model Question {
  questionId    String         @id @default(cuid())
  questionTitle String         @db.Text
  questionStr   String         @db.Text
  classroom     Classroom      @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId   String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  answer        Answer[]
  likes         LikeQuestion[]

  @@fulltext([questionTitle, questionStr])
}

model LikeQuestion {
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  questionId String
  question   Question @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  likeType   LikeType


  @@id([userId, questionId])
}

model Answer {
  answerId   String       @id @default(cuid())
  answerStr  String       @db.Text
  question   Question     @relation(fields: [questionId], references: [questionId], onDelete: Cascade)
  questionId String
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  likes      LikeAnswer[]

  @@fulltext([answerStr])
}

model LikeAnswer {
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  answerId String
  answer   Answer   @relation(fields: [answerId], references: [answerId], onDelete: Cascade)
  likeType LikeType

   @@id([userId, answerId])
}

enum UserRole {
  STUDENT
  ASSISTANT
  INSTRUCTOR
}

enum LikeType {
  like
  dislike
}
