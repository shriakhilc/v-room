generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String? @db.Text
  id_token          String? @db.Text
  session_state     String? @db.Text
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String                    @id @default(cuid())
  name                   String?
  email                  String?                   @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  classroomsAsStudent    StudentsOnClassrooms[]
  classroomsAsAssistant  AssistantsOnClassrooms[]
  classroomsAsInstructor InstructorsOnClassrooms[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Classroom {
  id           String                    @id @default(cuid())
  name         String
  department   String
  courseNumber Int                       @unique
  crn          Int                       @unique
  students     StudentsOnClassrooms[]
  assistants   AssistantsOnClassrooms[]
  instructors  InstructorsOnClassrooms[]
  inviteCode   String                    @default(cuid())
  active       Boolean                   @default(true)
  meetings     String                    @default("")
}

model StudentsOnClassrooms {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String

  @@id([userId, classroomId])
}

model AssistantsOnClassrooms {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String

  @@id([userId, classroomId])
}

model InstructorsOnClassrooms {
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
  classroomId String

  @@id([userId, classroomId])
}
